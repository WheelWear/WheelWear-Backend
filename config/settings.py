"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import environ
import os
import sys
from google.oauth2 import service_account

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# python path에 apps디렉토리를 추가하여 앱들의 위치를 파악악
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# 환경 변수 초기화
env = environ.Env(DEBUG=(bool, False))

# 환경변수 파일 읽기(도커에서 환경변수를 설정했다면 없이 해도 괜찮다.)
# environ.Env.read_env(os.path.join(BASE_DIR, '.env', 'django.env'))

# 기본 설정
APPEND_SLASH=True # url요청시 자동으로 /를 생성해주는걸 막는다.
SECRET_KEY = env('SECRET_KEY', default='django-insecure-2nk8^)j)6dg+$ymsb*vnf3h5svijq&z2&5_iqfhh!xtqcwdq06')
DEBUG = env('DEBUG', default=True)
ALLOWED_HOSTS = ['*']
CORS_ALLOW_ALL_ORIGINS = True  # 개발 중에는 모든 도메인 허용
# SECRET_KEY = env('SECRET_KEY')
# DEBUG = env('DEBUG')
# ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')
# AUTH_USER_MODEL = 'accounts.User'

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'storages',
]
INSTALLED_APPS += [
    'apps.accounts',
    'apps.clothing',
    'apps.vtryon',
    'rest_framework',
    'django_filters',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',  # CORS 허용 설정 시 사용
]
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",  # csrf 검증은 jwt와 같은 토큰기반 방식에선 불필요
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# Static파일은 개발자가 직접 준비(프론트)해서 미리 서버에 올려놓는 정적 파일들 -> 보통 nginx 사용
# 정적 파일을 배포 할때는 python manage.py collectstatic를 사용하여 정적 파일을 모으고 웹서버에서 배포한다.
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# MEDIA 사용자가 업로드 -> 보통 Nginx/aws S3의 별도 스토리지 사용용
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# 기본 파일 저장소를 Google Cloud Storage로 설정
DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

# GCP 버킷 이름
GS_BUCKET_NAME = env('GCP_BUCKET_NAME')

GS_SERVICE_ACCOUNT_KEY = os.path.join(BASE_DIR, env('GCP_SERVICE_ACCOUNT_KEY'))

GS_CREDENTIALS = service_account.Credentials.from_service_account_file(GS_SERVICE_ACCOUNT_KEY)

GS_QUERYSTRING_AUTH = False  # 서명된 URL 사용 활성화
# GS_EXPIRATION = 86400       # URL 만료 시간을 초 단위로 설정 (예: 86400초 = 24시간)

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 추가 설정

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    # 'BLACKLIST_TOKEN_CHECKS': ['access', 'refresh'],  # access token도 블랙리스트 체크
    'ROTATE_REFRESH_TOKENS': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
}